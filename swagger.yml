openapi: "3.0.0"

info:
  version: "1.0.0"
  title: "Nothing Better Than AL API"
  description: "This is the API for the Nothing Better Than AL cinema project"

host: nodeapi.3630alloperenoel.fr
basePath: "/"
schemes:
  - https

components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "The JWT token to authorize the user"

  responses:
    BearerNotProvidedResponse:
      description: "Bearer token not provided"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bearer token not provided"

    UnauthorizedResponse:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Unauthorized"

    InvalidInputResponse:
      description: "Invalid input"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              errors:
                type: "object"
                example:
                  {
                    "field1": "field_1 is required",
                    "field2": "field2 need to be at least 3 characters long",
                    "...": "...",
                  }

    ServerErrorResponse:
      description: "Server error"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Something went wrong"
paths:
  /healthcheck:
    get:
      tags:
        - "Healthcheck"
      summary: "Healthcheck"
      description: "Check if the API is up and running"
      responses:
        200:
          description: "Server is running"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Server is running"

  /users/signup:
    post:
      tags:
        - "Authentification"
      summary: "Sign up"
      description: "Create a new user"
      requestBody:
          description: "User object that needs to be added"
          required: true
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  email:
                    type: "string"
                    example: "johndoe@gmail.com"
                  firstName:
                    type: "string"
                    example: "John"
                  lastName:
                    type: "string"
                    example: "Doe"
                  password:
                    type: "string"
                    example: "password"
      responses:
        201:
          description: "User created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User created"
                  user:
                    $ref: "#/definitions/User"
        400:
          $ref: "#/components/responses/InvalidInputResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users/login:
    post:
      tags:
        - "Authentification"
      summary: "Login"
      description: "Login a user"
      requestBody:
        description: "User credentials to login"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "johndoe@gmail.com"
                password:
                  type: "string"
                  example: "password"
      responses:
        200:
          description: "User logged in"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Logged in"
                  token:
                    type: "string"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjIwZjQwZjQwZjQwZjQwZjQwZjQwZjQiLCJpYXQiOjE1OTYwNjQwNzJ9.1"
        400:
          $ref: "#/components/responses/InvalidInputResponse"
        401:
          description: "Error while logging in"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid email or password"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users/logout:
    get:
      tags:
        - "Authentification"
      security:
        - bearer: []
      summary: "Logout"
      description: "Logout a user"
      responses:
        200:
          description: "Logged out"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Logged out"
        401:
          $ref: "#/components/responses/BearerNotProvidedResponse"
        403:
          $ref: "#/components/responses/UnauthorizedResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users:
    get:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Get current user"
      description: "Get the current user"
      responses:
        200:
          description: "Current user"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user:
                    $ref: "#/definitions/User"
        401:
          $ref: "#/components/responses/BearerNotProvidedResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

    patch:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Update current user"
      description: "Update the current user"
      requestBody:
        description: "User object that needs to be updated, not all fields are required"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "johndoe@gmail.com"
                firstName:
                  type: "string"
                  example: "John"
                lastName:
                  type: "string"
                  example: "Doe"
                password:
                  type: "string"
                  example: "password"
      responses:
        200:
          description: "User updated"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User updated"
                  user:
                    $ref: "#/definitions/User"
        400:
          $ref: "#/components/responses/InvalidInputResponse"
        401:
          $ref: "#/components/responses/BearerNotProvidedResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"
    
    delete:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Delete current user"
      description: "Delete the current user"
      responses:
        200:
          description: "User deleted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User deleted"
                  user:
                    $ref: "#/definitions/User"
        401:
          $ref: "#/components/responses/BearerNotProvidedResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users/deposit:
    post:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Deposit successful"
      description: "Deposit money to the current user"
      requestBody:
        description: "Amount to deposit"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                amount:
                  type: "number"
                  example: 100
      responses:
        200:
          description: "Money deposited"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Money deposited"
                  user:
                    $ref: "#/definitions/User"
                  transaction:
                    $ref: "#/definitions/Transaction"
        400:
          $ref: "#/components/responses/InvalidInputResponse"
        401:
          $ref: "#/components/responses/BearerNotProvidedResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users/withdraw:
    post:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Withdraw money"
      description: "Withdraw money from the current user"
      requestBody:
        description: "Amount to withdraw"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                amount:
                  type: "number"
                  example: 100
      responses:
        200:
          description: "Withdrawal successful"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Money withdrawn"
                  user:
                    $ref: "#/definitions/User"
                  transaction:
                    $ref: "#/definitions/Transaction"
        400:
          $ref: "#/components/responses/InvalidInputResponse"
        401:
          $ref: "#/components/responses/BearerNotProvidedResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

  /users/transactions:
    get:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Get user transactions"
      description: "Get the current user transactions"
      responses:
        200:
          description: "User transactions"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  numberOfTransactions:
                    type: "number"
                    example: 1
                  transactions:
                    type: "array"
                    items:
                      $ref: "#/definitions/Transaction"
        401:
          $ref: "#/components/responses/BearerNotProvidedResponse"
        500:
          $ref: "#/components/responses/ServerErrorResponse"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "number"
        example: 1
      email:
        type: "string"
        example: "johndoe@gmail.com"
      firstName:
        type: "string"
        example: "John"
      lastName:
        type: "string"
        example: "Doe"
      password:
        type: "string"
        example: "password"
      role:
        type: enum
        enum:
          - "user"
          - "admin"
        example: "user"
      money:
        type: "number"
        example: 100
      createdAt:
        type: "string"
        example: "2020-08-01T12:00:00Z"
      updatedAt:
        type: "string"
        example: "2020-08-01T12:00:00Z"

  Transaction:
    type: "object"
    properties:
      id:
        type: "number"
        example: 1
      amount:
        type: "number"
        example: 100
      type:
        type: enum
        enum:
          - "deposit"
          - "withdraw"
          - "buy"
        example: "deposit"
      createdAt:
        type: "string"
        example: "2020-08-01T12:00:00Z"
