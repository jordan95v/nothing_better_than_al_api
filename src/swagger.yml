openapi: "3.1.0"

info:
  version: "1.0.0"
  title: "Nothing Better Than AL API"
  description: "This is the API for the Nothing Better Than AL cinema project"

host: nodeapi.3630alloperenoel.fr
basePath: "/"
schemes:
  - https

components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "The JWT token to authorize the user"

  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        email:
          type: "string"
          example: "johndoe@mail.com"
        firstName:
          type: "string"
          example: "John"
        lastName:
          type: "string"
          example: "Doe"
        role:
          type: enum
          enum:
            - "USER"
            - "ADMIN"
          example: "USER"
        money:
          type: "number"
          example: 100
        createdAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"

    Transaction:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        amount:
          type: "number"
          example: 100
        type:
          type: enum
          enum:
            - "DEPOSIT"
            - "WITHDRAW"
            - "BUY"
          example: "DEPOSIT"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"

    Film:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        type:
          type: enum
          enum:
            - "ACTION"
            - "ADVENTURE"
            - "COMEDY"
            - "DRAMA"
            - "FANTASY"
            - "HORROR"
            - "MYSTERY"
            - "ROMANCE"
            - "THRILLER"
          example: "ACTION"
        title:
          type: "string"
          example: "The Dark Knight"
        description:
          type: "string"
          example: "Batman fights the Joker"
        duration:
          type: "number"
          example: 120
        image:
          type: "string"
          example: "https://image.com"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"

    Room:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        name:
          type: "string"
          example: "Room 1"
        number:
          type: "number"
          example: 1
        description:
          type: "string"
          example: "Room 1 is a standard room"
        images:
          type: "array"
          items:
            type: "string"
          example: ["https://image.com"]
        type:
          type: "string"
          example: "STANDARD"
        capacity:
          type: "number"
          example: 100
        handicap:
          type: "boolean"
          example: false
        maintenance:
          type: "boolean"
          example: false
        basePrice:
          type: "number"
          example: 10
        createdAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"

    Session:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        startAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"
        createdAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"

    Ticket:
      type: "object"
      properties:
        id:
          type: "number"
          example: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"
        updatedAt:
          type: "string"
          format: "date-time"
          example: "2020-08-01T12:00:00Z"

  responses:
    BearerNotProvided:
      description: "Bearer token not provided"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bearer token not provided"

    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Unauthorized"

    InvalidInput:
      description: "Invalid input"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              errors:
                type: "object"
                example:
                  {
                    "field1": "field_1 is required",
                    "field2": "field2 need to be at least 3 characters long",
                    "...": "...",
                  }

    ServerError:
      description: "Server error"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Something went wrong"

paths:
  /healthcheck:
    get:
      tags:
        - "Healthcheck"
      summary: "Healthcheck"
      description: "Check if the API is up and running"
      responses:
        200:
          description: "Server is running"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Server is running"

  /users/signup:
    post:
      tags:
        - "Authentification"
      summary: "Sign up"
      description: "Create a new user"
      requestBody:
        description: "User object that needs to be added"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "johndoe@gmail.com"
                firstName:
                  type: "string"
                  example: "John"
                lastName:
                  type: "string"
                  example: "Doe"
                password:
                  type: "string"
                  example: "password"
      responses:
        201:
          description: "User created"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User created"
                  user:
                    $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/InvalidInput"
        500:
          $ref: "#/components/responses/ServerError"

  /users/login:
    post:
      tags:
        - "Authentification"
      summary: "Login"
      description: "Login a user"
      requestBody:
        description: "User credentials to login"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "johndoe@gmail.com"
                password:
                  type: "string"
                  example: "password"
      responses:
        200:
          description: "User logged in"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Logged in"
                  token:
                    type: "string"
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjIwZjQwZjQwZjQwZjQwZjQwZjQwZjQiLCJpYXQiOjE1OTYwNjQwNzJ9.1"
        400:
          $ref: "#/components/responses/InvalidInput"
        401:
          description: "Error while logging in"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid email or password"
        500:
          $ref: "#/components/responses/ServerError"

  /users/logout:
    get:
      tags:
        - "Authentification"
      security:
        - bearer: []
      summary: "Logout"
      description: "Logout a user"
      responses:
        200:
          description: "Logged out"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Logged out"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        403:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

  /users:
    get:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Get current user"
      description: "Get the current user"
      responses:
        200:
          description: "Current user"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

    patch:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Update current user"
      description: "Update the current user"
      requestBody:
        description: "User object that needs to be updated, not all fields are required"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                email:
                  type: "string"
                  example: "johndoe@gmail.com"
                firstName:
                  type: "string"
                  example: "John"
                lastName:
                  type: "string"
                  example: "Doe"
                password:
                  type: "string"
                  example: "password"
      responses:
        200:
          description: "User updated"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User updated"
                  user:
                    $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/InvalidInput"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Delete current user"
      description: "Delete the current user"
      responses:
        200:
          description: "User deleted"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "User deleted"
                  user:
                    $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

  /users/deposit:
    post:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Deposit successful"
      description: "Deposit money to the current user"
      requestBody:
        description: "Amount to deposit"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                amount:
                  type: "number"
                  example: 100
      responses:
        200:
          description: "Money deposited"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Money deposited"
                  user:
                    $ref: "#/components/schemas/User"
                  transaction:
                    $ref: "#/components/schemas/Transaction"
        400:
          $ref: "#/components/responses/InvalidInput"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

  /users/withdraw:
    post:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Withdraw money"
      description: "Withdraw money from the current user"
      requestBody:
        description: "Amount to withdraw"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                amount:
                  type: "number"
                  example: 100
      responses:
        200:
          description: "Withdrawal successful"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Money withdrawn"
                  user:
                    $ref: "#/components/schemas/User"
                  transaction:
                    $ref: "#/components/schemas/Transaction"
        400:
          $ref: "#/components/responses/InvalidInput"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

  /users/transactions:
    get:
      tags:
        - "Users"
      security:
        - bearer: []
      summary: "Get user transactions"
      description: "Get the current user transactions"
      responses:
        200:
          description: "User transactions"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  numberOfTransactions:
                    type: "number"
                    example: 1
                  transactions:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Transaction"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

  /sessions:
    get:
      tags:
        - "Sessions"
      security:
        - bearer: []
      summary: "Get sessions"
      description: "Get all sessions"
      parameters:
        - in: "query"
          name: "startAt"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-08-01T12:00:00Z"
          description: "Start date to get sessions"
          required: false
        - in: "query"
          name: "endAt"
          schema:
            type: "string"
            format: "date-time"
            example: "2020-08-01T12:00:00Z"
          description: "End date to get sessions"
          required: false
      responses:
        200:
          description: "Sessions"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  allOf:
                    - $ref: "#/components/schemas/Session"
                    - type: "object"
                      properties:
                        film:
                          $ref: "#/components/schemas/Film"
                        room:
                          $ref: "#/components/schemas/Room"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

  /sessions/{id}/buy:
    post:
      tags:
        - "Sessions"
      security:
        - bearer: []
      summary: "Buy ticket"
      description: "Buy a ticket for a session"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "number"
            example: 1
          required: true
          description: "ID of the session to buy a ticket for"
      responses:
        201:
          description: "Ticket bought"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Ticket bought"
                  oldMoney:
                    type: "number"
                    example: 100
                  newMoney:
                    type: "number"
                    example: 90
                  transaction:
                    allOf:
                      - $ref: "#/components/schemas/Transaction"
                      - type: "object"
                        properties:
                          ticket:
                            $ref: "#/components/schemas/Ticket"
        400:
          description: "Room is full or not enough money"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Room is full or not enough money"
        500:
          $ref: "#/components/responses/ServerError"

  /films:
    get:
      tags:
        - "Films"
      security:
        - bearer: []
      summary: "Get films"
      description: "Get all films"
      parameters:
        - in: "query"
          name: "title"
          schema:
            type: "string"
          description: "Title of the film"
          required: false
        - in: "query"
          name: "type"
          schema:
            type: "string"
            enum:
              - "ACTION"
              - "ADVENTURE"
              - "COMEDY"
              - "DRAMA"
              - "FANTASY"
              - "HORROR"
              - "MYSTERY"
              - "ROMANCE"
              - "THRILLER"
          description: "Type of the film"
          required: false
        - in: "query"
          name: "minDuration"
          schema:
            type: "number"
          description: "Minimum duration of the film"
          required: false
        - in: "query"
          name: "maxDuration"
          schema:
            type: "number"
          description: "Maximum duration of the film"
          required: false
        - in: "query"
          name: "startDate"
          schema:
            type: "string"
            format: "date-time"
          description: "Start date of the sessions"
          required: false
        - in: "query"
          name: "endDate"
          schema:
            type: "string"
            format: "date-time"
          description: "End date of the sessions"
          required: false
      responses:
        200:
          description: "Films"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Film"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

  /films/{id}:
    get:
      tags:
        - "Films"
      security:
        - bearer: []
      summary: "Get a film"
      description: "Get a film by ID, including sessions based on the provided dates"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "number"
            example: 1
          required: true
          description: "ID of the film to get"
        - in: "query"
          name: "startDate"
          schema:
            type: "string"
            format: "date-time"
          description: "Start date of the sessions"
          required: false
        - in: "query"
          name: "endDate"
          schema:
            type: "string"
            format: "date-time"
          description: "End date of the sessions"
          required: false
      responses:
        200:
          description: "Film"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Film"
                  - type: "object"
                    properties:
                      sessions:
                        type: "array"
                        items:
                          $ref: "#/components/schemas/Session"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        404:
          description: "Film not found"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Film not found"
        500:
          $ref: "#/components/responses/ServerError"

  /rooms:
    get:
      tags:
        - "Rooms"
      security:
        - bearer: []
      summary: "Get rooms"
      description: "Get all rooms without maintenance"
      responses:
        200:
          description: "Rooms"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Room"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"

  /rooms/{number}:
    get:
      tags:
        - "Rooms"
      security:
        - bearer: []
      summary: "Get a room"
      description: "Get a room by number, if not in maintenance"
      parameters:
        - in: "path"
          name: "number"
          schema:
            type: "number"
            example: 1
          required: true
          description: "Number of the room to get"
      responses:
        200:
          description: "Room"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        400:
          $ref: "#/components/responses/InvalidInput"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        404:
          description: "Room not found"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Room not found"
        500:
          $ref: "#/components/responses/ServerError"

  /rooms/{number}/sessions:
    get:
      tags:
        - "Rooms"
      security:
        - bearer: []
      summary: "Get room sessions"
      description: "Get all sessions for a room based on the provided dates"
      parameters:
        - in: "path"
          name: "number"
          schema:
            type: "number"
            example: 1
          required: true
          description: "Number of the room to get sessions for"
        - in: "query"
          name: "startDate"
          schema:
            type: "string"
            format: "date-time"
          description: "Start date of the sessions"
          required: false
        - in: "query"
          name: "endDate"
          schema:
            type: "string"
            format: "date-time"
          description: "End date of the sessions"
          required: false
      responses:
        200:
          description: "Sessions"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  allOf:
                    - $ref: "#/components/schemas/Session"
                    - type: "object"
                      properties:
                        film:
                          $ref: "#/components/schemas/Film"
        401:
          $ref: "#/components/responses/BearerNotProvided"
        500:
          $ref: "#/components/responses/ServerError"
