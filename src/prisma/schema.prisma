// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ALTER DATABASE postgres SET timezone TO 'Europe/Paris';

enum Role {
  ADMIN
  USER
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  firstName    String
  lastName     String
  password     String
  role         Role          @default(USER)
  tokens       Token[]
  tickets      Ticket[]
  money        Float         @default(0)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("users")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@map("tokens")
}

enum TransactionType {
  DEPOSIT
  BUY
}

model Transaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  amount    Float
  type      TransactionType
  ticket    Ticket?
  createdAt DateTime @default(now())

  @@map("transactions")
}

model Ticket {
  id            Int         @id @default(autoincrement())
  session       Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId     Int
  user          User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId        Int
  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: NoAction)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("tickets")
}

enum RoomType {
  STANDARD
  IMAX
}

model Room {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  number      Int       @unique
  description String
  images      String[]
  type        RoomType
  capacity    Int
  handicap    Boolean
  maintenance Boolean
  basePrice   Float
  sessions    Session[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("rooms")
}

model Session {
  id        Int      @id @default(autoincrement())
  startAt   DateTime
  film      Film     @relation(fields: [filmId], references: [id], onDelete: NoAction)
  filmId    Int
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

enum FilmType {
  ACTION
  ADVENTURE
  COMEDY
  DRAMA
  FANTASY
  HORROR
  MYSTERY
  ROMANCE
  THRILLER
}

model Film {
  id          Int       @id @default(autoincrement())
  type        FilmType
  title       String
  description String
  duration    Int
  image       String
  sessions    Session[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("films")
}
